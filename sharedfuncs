#!/bin/bash

# VARIABLES
  # COLORS
    BOLD=$(tput bold)
    UNDERLINE=$(tput sgr 0 1)
    RESET=$(tput sgr0)
    # regular colors
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    PURPLE=$(tput setaf 5)
    CYAN=$(tput setaf 6)
    WHITE=$(tput setaf 7)
    # bold
    BRED=${Bold}$(tput setaf 1)
    BGREEN=${Bold}$(tput setaf 2)
    BYELLOW=${Bold}$(tput setaf 3)
    BBLUE=${Bold}$(tput setaf 4)
    BPURPLE=${Bold}$(tput setaf 5)
    BCYAN=${Bold}$(tput setaf 6)
    BWHITE=${Bold}$(tput setaf 7)
  
  MOUNTPOINT="/mnt"

  # LOG FILE
    LOG="install_error.log"
    [[ -f $LOG ]] && rm -f $LOG
    PKG_FAIL="install_pkg_fail_list.log"
    [[ -f $PKG_FAIL ]] && rm -f $PKG_FAIL
    
# COMMON FUNCTIONS
  progress() {
    while true; do
      kill -0 $PID &> /dev/null;
      if [[ $? == 0 ]]; then
        sleep 0.25
      else
        wait $PID
	    RETCODE=$?
	    echo "$PID's retcode: $RETCODE" >> $LOG
	    if [[ $RETCODE == 0 ]] || [[ $RETCODE == 255 ]]; then
	      echo -e "${GREEN}(success)${RESET}"
	    else
	      echo -e "${RED}(failed)${RESET}"
	      echo -e "$PKG" >> $PKG_FAIL
	    fi
	    break
      fi
    done
  }

  check_root() {
    if [[ "$(id -u)" != "0" ]]; then
      echo "${RED}ERROR! You must execute the script as the 'root' user.${RESET}"
      exit
    fi
  }

  check_archlinux() {
    if [[ ! -e /etc/arch-release ]]; then
      echo "ERROR! You must execute the script on Arch Linux."
    fi
  }

  check_hostname() {
    if [[ `echo ${HOSTNAME} | sed 's/ //g'` == "" ]]; then
      echo "ERROR! Hostname is not configured."
    fi
  }

  check_pacman_blocked() {
    if [[ -f /var/lib/pacman/db.lck ]]; then
      echo "${RED}ERROR! Pacman is blocked. \nIf not running remove /var/lib/pacman/db.lck.${RESET}"
    fi
  }

  check_connection(){
    connection_test() {
      ping -c 1 google.com &> /dev/null && return 1 || return 0
    }
    WIRED_DEV=`ip link | grep enp | awk '{print $2}'| sed 's/://' | sed '1!d'`
    WIRELESS_DEV=`ip link | grep wlp | awk '{print $2}'| sed 's/://' | sed '1!d'`
    if connection_test; then
      echo "${RED}ERROR! Connection not found.${RESET}"

      case "$1" in
        wired)
          systemctl start dhcpcd@${WIRED_DEV}.service
          break
          ;;
        wireless)
          ip link set ${WIRELESS_DEV} up
          wifi-menu ${WIRELESS_DEV}
          break
          ;;
      esac
      check_connection
    fi
  }

  # This option will avoid any problem with packages install
  check_multilib(){
    if [[ $ARCHI == x86_64 ]]; then
      local MULTILIB=`grep -n "\[multilib\]" /etc/pacman.conf | cut -f1 -d:`
      if [[ -z $MULTILIB ]]; then
        echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
        echo -e '\nMultilib repository added into pacman.conf file'
      else
        sed -i "${MULTILIB}s/^#//" /etc/pacman.conf
        local MULTILIB=$(( $MULTILIB + 1 ))
        sed -i "${MULTILIB}s/^#//" /etc/pacman.conf
      fi
    fi
  }

  aui_download_packages() {
    for PKG in $1; do
      #exec command as user instead of root
      su - ${username} -c "
        [[ ! -d aui_packages ]] && mkdir aui_packages
        cd aui_packages
        curl -o $PKG.tar.gz https://aur.archlinux.org/packages/${PKG:0:2}/$PKG/$PKG.tar.gz
        tar zxvf $PKG.tar.gz
        rm $PKG.tar.gz
        cd $PKG
        makepkg -csi --noconfirm
      "
    done
  }

  # Check if a package is already installed
  is_package_installed() {
    for PKG in $1; do
      pacman -Q $PKG &> /dev/null && return 0;
    done
    return 1
  }

  # Install package using pacman
  package_install() {
    echo "${BLUE}Installing packages:${RESET}"
    for PKG in ${1}; do
      if ! is_package_installed "${PKG}" ; then
        echo -ne "${PKG} "
        pacman -S --noconfirm --needed ${PKG} >>"$LOG" 2>&1 &
        PID=$!;progress $PID
      else
        echo "${PKG} ${YELLOW}(already installed)${RESET}"
      fi
    done
  }

  system_update() {
    pacman -Syy
  }
