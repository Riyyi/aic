#!/bin/bash  

setlocale() { #{{{
    local _locale_list=(`cat /etc/locale.gen | grep UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
    PS3="$prompt1"
    echo "Select locale:"
    select LOCALE in "${_locale_list[@]}"; do
        if contains_element "$LOCALE" "${_locale_list[@]}"; then
            LOCALE_UTF8="${LOCALE}.UTF-8"
            break
        else
            invalid_option
        fi
    done
} #}}}

settimezone() { #{{{
    local _zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
    PS3="$prompt1"
    echo "Select zone:"
    select ZONE in "${_zones[@]}"; do
        if contains_element "$ZONE" "${_zones[@]}"; then
        local _subzones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
        PS3="$prompt1"
        echo "Select subzone:"
            select SUBZONE in "${_subzones[@]}"; do
                if contains_element "$SUBZONE" "${_subzones[@]}"; then
                    break
                else
                    invalid_option
                fi
            done
            break
        else
            invalid_option
        fi
    done
  } #}}}
#}}}

add_repository() { #{{{
    local _repo=${1}
    local _url=${2}
    [[ -n ${3} ]] && local _siglevel="\nSigLevel = ${3}" || local _siglevel=""

    local _check_repo=`grep -F "${_repo}" /etc/pacman.conf`
    if [[ -z $_check_repo ]]; then
        echo -e "\n[${_repo}]${_siglevel}\nServer = ${_url}" >> /etc/pacman.conf
        system_update
    fi
} #}}}

add_line() { #{{{
    local _add_line=${1}
    local _filepath=${2}

    local _has_line=`grep -ci "${_add_line}" ${_filepath}`
    [[ $_has_line -eq 0 ]] && echo "${_add_line}" >> ${_filepath}
} #}}}

add_module() { #{{{
    for module in $1; do
        #check if the name of the module can be the same of the module or the given name
        [[ $# -lt 2 ]] && local _module_name="$module" || local _module_name="$2"
        local _is_disabled=`cat /etc/modules-load.d/${_module_name}.conf | grep $module &> /dev/null`
        [[ -z $_is_disabled ]] && echo "$module" >> /etc/modules-load.d/${_module_name}.conf
        start_module "$module"
    done
} #}}}

add_line() { #{{{
    local _add_line=${1}
    local _filepath=${2}

    local _has_line=`grep -ci "${_add_line}" ${_filepath}`
    [[ $_has_line -eq 0 ]] && echo "${_add_line}" >> ${_filepath}
} #}}}
  
replace_line() { #{{{
    local _search=${1}
    local _replace=${2}
    local _filepath=${3}
    local _filebase=`basename ${3}`

    sed -e "s/${_search}/${_replace}/" ${_filepath} > /tmp/${_filebase} 2>"$LOG"
    if [[ ${?} -eq 0 ]]; then
        mv /tmp/${_filebase} ${_filepath}
    else
        cecho "failed: ${_search} - ${_filepath}"
    fi
} #}}}

add_user_to_group() { #{{{
    local _user=${1}
    local _group=${2}

    if [[ -z ${_group} ]]; then
        error_msg "ERROR! 'add_user_to_group' was not given enough parameters."
    fi

    ncecho " ${BBlue}[${Reset}${Bold}X${BBlue}]${Reset} Adding ${Bold}${_user}${Reset} to ${Bold}${_group}${Reset} "
    gpasswd -a ${_user} ${_group} >>"$LOG" 2>&1 &
    pid=$!;progress $pid
} #}}}

system_ctl() { #{{{
    local _action=${1}
    local _object=${2}
    ncecho " ${BBlue}[${Reset}${Bold}X${BBlue}]${Reset} systemctl ${_action} ${_object} "
    systemctl ${_action} ${_object} >> "$LOG" 2>&1
    pid=$!;progress $pid
} #}}}

arch_chroot() { #{{{
    arch-chroot $MOUNTPOINT /bin/bash -c "${1}"
} #}}}
