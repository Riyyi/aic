#!/bin/bash

#SELECT DEVICE {{{
select_device(){
    devices_list=(`lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd'`);
    PS3="$prompt1"
    echo -e "Select partition:\n"
    
    select DEVICE in "${devices_list[@]}"; do
        if contains_element "${DEVICE}" "${devices_list[@]}"; then
            break
        else
            invalid_option
        fi
    done
    
    BOOT_MOUNTPOINT=$DEVICE
}
#}}}

#SETUP PARTITION{{{
create_partition(){
    apps_list=("cfdisk" "cgdisk" "fdisk" "gdisk" "parted");
    PS3="$prompt1"
    echo -e "Select partition program:"
    
    select OPT in "${apps_list[@]}"; do
        if contains_element "$OPT" "${apps_list[@]}"; then
            select_device
            case $OPT in
                parted)
                    parted -a opt ${DEVICE}
                    ;;
                *)
                    $OPT ${DEVICE}
                    ;;
                esac
            break
        else
            invalid_option
        fi
    done
}
#}}}

#SETUP LVM {{{
setup_lvm(){
    print_title "LVM - https://wiki.archlinux.org/index.php/LVM"
    print_info "LVM is a logical volume manager for the Linux kernel; it manages disk drives and similar mass-storage devices. "
    print_warning "Last partition will take 100% of free space left"
  
    if [[ $LUKS -eq 1 ]]; then
        pvcreate /dev/mapper/crypt
        vgcreate lvm /dev/mapper/crypt
        else
        block_list=(`lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}'`)
        PS3="$prompt1"
        echo -e "Select partition:"
        
        select OPT in "${block_list[@]}"; do        
            if contains_element "$OPT" "${block_list[@]}"; then
                pvcreate $OPT
                vgcreate lvm $OPT
                break
            else
                invalid_option
            fi
        done
    fi
  
    read -p "Enter number of partitions [ex: 2]: " number_partitions
    i=1
    while [[ $i -le $number_partitions ]]; do
        read -p "Enter $iª partition name [ex: home]: " partition_name
        
        if [[ $i -eq $number_partitions ]]; then
            lvcreate -l 100%FREE lvm -n ${partition_name}
        else
            read -p "Enter $iª partition size [ex: 25G, 200M]: " partition_size
            lvcreate -L ${partition_size} lvm -n ${partition_name}
        fi
        
        i=$(( i + 1 ))
    done
    
    LVM=1
}
#}}}

#SETUP LUKS {{{
setup_luks(){
    print_title "LUKS - https://wiki.archlinux.org/index.php/LUKS"
    print_info "The Linux Unified Key Setup or LUKS is a disk-encryption specification created by Clemens Fruhwirth and originally intended for Linux."
    print_danger "\tDo not use this for boot partitions"
    
    block_list=(`lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}'`)
    PS3="$prompt1"
    echo -e "Select partition:"
  
    select OPT in "${block_list[@]}"; do
        if contains_element "$OPT" "${block_list[@]}"; then
            cryptsetup --cipher aes-xts-plain64 --key-size 512 --hash sha512 --iter-time 5000 --use-random --verify-passphrase luksFormat $OPT
            cryptsetup open --type luks $([[ $TRIM -eq 1 ]] && echo "--allow-discards") $OPT crypt
            LUKS=1
            LUKS_DISK=`echo ${OPT} | sed 's/\/dev\///'`
            break
        elif [[ $OPT == "Cancel" ]]; then
            break
        else
            invalid_option
        fi
    done
}
#}}}

#AUTO PARTITION {{{
auto_partition(){
    # Number of the current partition
    partition_number=1
    
    # UEFI (EFI System)
    if [[ $UEFI -eq 1 ]]; then
        # GPT partition table
        partition_table=g
        
        # /boot partition
        boot="n
        p
        $partition_number
        
        +256M
        t
        $partition_number
        1
        "
        
        # Increment current partition
        partition_number=$((partition_number+1))
    else
        # MBR partition table
        partition_table=o
    fi
    
    # Swap (Linux swap / Solaris)
    if [[ $SWAP_SIZE != "" ]]; then
        swap="n
        p
        $partition_number
        
        +$SWAP_SIZE
        t
        $partition_number
        82
        "
        
        # Increment current partition
        partition_number=$((partition_number+1))
    fi
    
    # Home
    if [[ $HOME_SIZE != "" ]]; then
        home="n
        p
        $partition_number
        
        +$HOME_SIZE
        "
        
        # Increment current partition
        partition_number=$((partition_number+1))
    fi
    
    # Create the new partitions
    echo "$partition_table
    $boot
    $swap
    $home
    n
    p
    $partition_number

    
    w" | fdisk ${DEVICE}
}
#}}}

#CREATE PARTITION SCHEME {{{
create_partition_scheme(){
    LUKS=0
    LVM=0

    print_title "https://wiki.archlinux.org/index.php/Partitioning"
    print_info "Partitioning a hard drive allows one to logically divide the available space into sections that can be accessed independently of one another."
    print_warning "Maintain Current does not work with LUKS"

    if [[ $AUTOMATIC_MODE -ne 1 ]]; then
        echo "AUTOMATIC MODE NOT ENABLED"
        partition_layout=("Default" "LVM" "LVM+LUKS" "Maintain Current")
        PS3="$prompt1"
        echo -e "Select partition scheme:"
        select OPT in "${partition_layout[@]}"; do
            case "$REPLY" in
                1)
                    create_partition
                    ;;
                2)
                    create_partition
                    setup_lvm
                    ;;
                3)
                    create_partition
                    setup_luks
                    setup_lvm
                    ;;
                4)
                    modprobe dm-mod
                    vgscan &> /dev/null
                    vgchange -ay &> /dev/null
                    ;;
                *)
                    invalid_option
                    ;;
            esac
            [[ -n $OPT ]] && break
        done
    else
        auto_partition
    fi
}
#}}}
