#!/bin/bash

#SELECT|FORMAT PARTITIONS {{{
format_partitions(){
    print_title "https://wiki.archlinux.org/index.php/File_Systems"
    print_info "This step will select and format the selected partiton where the archlinux will be installed"
    print_danger "\tAll data on the ROOT and SWAP partition will be LOST."
    i=0

    block_list=(`lsblk | grep 'part\|lvm' | awk '{print substr($1,3)}'`)

    # check if there is no partition
    if [[ ${#block_list[@]} -eq 0 ]]; then
        echo "No partition found"
        exit 0
    fi

    partitions_list=()
    for OPT in ${block_list[@]}; do
        check_lvm=`echo $OPT | grep lvm`
        
        if [[ -z $check_lvm ]]; then
            partitions_list+=("/dev/$OPT")
        else
            partitions_list+=("/dev/mapper/$OPT")
        fi
    done

    # partitions based on boot system
    if [[ $UEFI -eq 1 ]]; then
        partition_name=("root" "EFI" "swap" "another")
    else
        partition_name=("root" "swap" "another")
    fi

    select_filesystem(){
        filesystems_list=( "btrfs" "ext2" "ext3" "ext4" "f2fs" "jfs" "nilfs2" "ntfs" "vfat" "xfs");
        PS3="$prompt1"
        echo -e "Select filesystem:\n"
        
        select filesystem in "${filesystems_list[@]}"; do
            if contains_element "${filesystem}" "${filesystems_list[@]}"; then
                break
            else
                invalid_option
            fi
        done
    }

    disable_partition(){
        #remove the selected partition from list
        unset partitions_list[${partition_number}]
        partitions_list=(${partitions_list[@]})
        #increase i
        [[ ${partition_name[i]} != another ]] && i=$(( i + 1 ))
    }

    format_partition(){
        read_input_text "Confirm format $1 partition"
        
        if [[ $OPTION == y ]]; then
            [[ -z $3 ]] && select_filesystem || filesystem=$3
            mkfs.${filesystem} $1 \
            $([[ ${filesystem} == xfs || ${filesystem} == btrfs ]] && echo "-f") \
            $([[ ${filesystem} == vfat ]] && echo "-F32") \
            $([[ $TRIM -eq 1 && ${filesystem} == ext4 ]] && echo "-E discard") \
            $([[ $TRIM -eq 1 && ${filesystem} == btrfs ]] && echo "-O discard")
            fsck $1
            mkdir -p $2
            mount -t ${filesystem} $1 $2
            disable_partition
        fi
    }

    format_swap_partition(){
        read_input_text "Confirm format $1 partition"
        
        if [[ $OPTION == y ]]; then
            mkswap $1
            swapon $1
            disable_partition
        fi
    }

    create_swap(){
        swap_options=("partition" "file" "skip");
        PS3="$prompt1"
        echo -e "Select ${BYellow}${partition_name[i]}${Reset} filesystem:\n"
        
        select OPT in "${swap_options[@]}"; do
            case "$REPLY" in
                1)
                    select partition in "${partitions_list[@]}"; do
                        #get the selected number - 1
                        partition_number=$(( $REPLY - 1 ))
                        
                        if contains_element "${partition}" "${partitions_list[@]}"; then
                            format_swap_partition "${partition}"
                        fi
                        
                        break
                    done
                    break
                    ;;
                2)
                    total_memory=`grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//'`
                    fallocate -l ${total_memory}M ${MOUNTPOINT}/swapfile
                    chmod 600 ${MOUNTPOINT}/swapfile
                    mkswap ${MOUNTPOINT}/swapfile
                    swapon ${MOUNTPOINT}/swapfile
                    i=$(( i + 1 ))
                    break
                    ;;
                3)
                    i=$(( i + 1 ))
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    }

    check_mountpoint(){
        if mount | grep $2; then
            echo "Successfully mounted"
            disable_partition "$1"
        else
            echo "WARNING: Not Successfully mounted"
        fi
    }

    set_efi_partition(){
        efi_options=("/boot/efi" "/boot")
        PS3="$prompt1"
        echo -e "Select EFI mountpoint:\n"

        select EFI_MOUNTPOINT in "${efi_options[@]}"; do
            if contains_element "${EFI_MOUNTPOINT}" "${efi_options[@]}"; then
                break
            else
                invalid_option
            fi
        done
    }

    if [[ $AUTOMATIC_MODE -eq 1 ]]; then

        partition_number=1
        if [[ $UEFI -eq 1 ]]; then
            partition_number=$((partition_number+1))
        fi
        if [[ $SWAP_SIZE != "" ]]; then
            partition_number=$((partition_number+1))
        fi
        if [[ $HOME_SIZE != "" ]]; then
            partition_number=$((partition_number+1))
        fi        
        
        ROOT_PART=`echo ${DEVICE}${partition_number} | sed 's/\/dev\/mapper\///' | sed 's/\/dev\///'`
        ROOT_MOUNTPOINT=${DEVICE}${partition_number}
        format_partition "${DEVICE}${partition_number}" "${MOUNTPOINT}"
        echo "Partition: ${DEVICE}${partition_number}"
        
        partition_number=1
        if [[ $UEFI -eq 1 ]]; then
            format_partition "${DEVICE}${partition_number}" "${MOUNTPOINT}${EFI_MOUNTPOINT}" vfat
            echo "Partition: ${DEVICE}${partition_number}"
            partition_number=$((partition_number+1))
        fi
        
        if [[ $SWAP_SIZE != "" ]]; then
            format_swap_partition "${DEVICE}${partition_number}"
            echo "Partition: ${DEVICE}${partition_number}"
            partition_number=$((partition_number+1))
        fi
        
        if [[ $HOME_SIZE != "" ]]; then
            format_partition "${DEVICE}${partition_number}" "${MOUNTPOINT}/home" ext4
            echo "Partition: ${DEVICE}${partition_number}"
            partition_number=$((partition_number+1))
        fi
        
        exit
    else
        while true; do
            PS3="$prompt1"
            if [[ ${partition_name[i]} == swap ]]; then
                create_swap
            else
                echo -e "Select ${BYellow}${partition_name[i]}${Reset} partition:\n"
            
                select partition in "${partitions_list[@]}"; do
                    #get the selected number - 1
                    partition_number=$(( $REPLY - 1 ))
                    
                    if contains_element "${partition}" "${partitions_list[@]}"; then
                        case ${partition_name[i]} in
                            root)
                                ROOT_PART=`echo ${partition} | sed 's/\/dev\/mapper\///' | sed 's/\/dev\///'`
                                ROOT_MOUNTPOINT=${partition}
                                format_partition "${partition}" "${MOUNTPOINT}"
                                ;;
                            EFI)
                                set_efi_partition
                                read_input_text "Format ${partition} partition"
                                if [[ $OPTION == y ]]; then
                                    format_partition "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}" vfat
                                else
                                    mkdir -p "${MOUNTPOINT}${EFI_MOUNTPOINT}"
                                    mount -t vfat "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}"
                                    check_mountpoint "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}"
                                fi
                                ;;
                            another)
                                read -p "Mountpoint [ex: /home]:" directory
                                [[ $directory == "/boot" ]] && BOOT_MOUNTPOINT=`echo ${partition} | sed 's/[0-9]//'`
                                select_filesystem
                                read_input_text "Format ${partition} partition"
                                
                                if [[ $OPTION == y ]]; then
                                    format_partition "${partition}" "${MOUNTPOINT}${directory}" "${filesystem}"
                                else
                                    read_input_text "Confirm fs="${filesystem}" part="${partition}" dir="${directory}""
                                
                                    if [[ $OPTION == y ]]; then
                                        mkdir -p ${MOUNTPOINT}${directory}
                                        mount -t ${filesystem} ${partition} ${MOUNTPOINT}${directory}
                                        check_mountpoint "${partition}" "${MOUNTPOINT}${directory}"
                                    fi
                                fi
                                ;;
                        esac
                        break
                    else
                        invalid_option
                    fi
                done
            fi
        
            #check if there is no partitions left
            if [[ ${#partitions_list[@]} -eq 0 && ${partition_name[i]} != swap ]]; then
                break
            elif [[ ${partition_name[i]} == another ]]; then
                read_input_text "Configure more partitions"
                [[ $OPTION != y ]] && break
            fi
        done
    
        pause_function
    fi
}
#}}}

#mkfs.fat -F32 /dev/sdxY

#format_swap_partition "${partition}"
# mkswap /dev/sdxY
# swapon /dev/sdxY
