#!/bin/bash

if [[ -f `pwd`/sharedfuncs ]]; then
  source sharedfuncs
else
  echo "Missing file: sharedfuncs"
  exit 1
fi

# VARIABLES
  CONNECTION="wireless"         #(wired/wireless)
  USER="rick"
  VIDEO_DRIVER="intel"          #(intel/ati/vesa)
  DEVICETYPE="laptop"           #(desktop/laptop/nuc)

# COMMON FUNCTIONS
  configure_sudo() {
    if ! is_package_installed "sudo" ; then
      package_install "sudo"
    fi
    #Configure sudoers
    if [[ ! -f /etc/sudoers.aic ]]; then
      cp -v /etc/sudoers /etc/sudoers.aic
      ## Uncomment to allow members of group wheel to execute any command
      sed -i '/%wheel ALL=(ALL) ALL/s/^# //' /etc/sudoers
      ## Same thing without a password (not secure)
      #sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^# //' /etc/sudoers

      echo "" >> /etc/sudoers
      echo 'Defaults visiblepw, insults' >> /etc/sudoers
      echo 'Defaults timestamp_timeout=15' >> /etc/sudoers
    fi
  }

  create_new_user() {
    # Create user
    username=`echo $USER | tr '[:upper:]' '[:lower:]'`
    useradd -m -g users -G wheel -s /bin/bash ${username}
    chfn ${username}
    passwd ${username}

    # Configure user
    cp /etc/skel/.bashrc /home/${username}
    chown -R ${username}:users /home/${username}
  }

  # Install Yaourt
  install_aurhelper() {
    if ! is_package_installed "yaourt" ; then
      package_install "base-devel yajl namcap"
      pacman -D --asdeps yajl namcap
      aui_download_packages "package-query yaourt"
      pacman -D --asdeps package-query
      if ! is_package_installed "yaourt" ; then
        echo "${RED}Yaourt not installed.${RESET}"
        exit 0
      fi
    fi
    AUR_PKG_MANAGER="yaourt"
  }

  install_basic_setup() {
    # (Un)compress tools
    package_install "file-roller zip unzip unrar p7zip xarchiver"

    # ALSA + PulseAudio
    package_install "alsa-utils alsa-plugins"
    [[ ${ARCHI} == x86_64 ]] && package_install "lib32-alsa-plugins"
    package_install "pulseaudio pulseaudio-alsa kdemultimedia-kmix"
    [[ ${ARCHI} == x86_64 ]] && package_install "lib32-libpulse"
    # automatically switch to newly-connected devices
    add_line "load-module module-switch-on-connect" "/etc/pulse/default.pa"

    # File Systems
    package_install "ntfs-3g dosfstools exfat-utils fuse fuse-exfat"
    is_package_installed "fuse" && add_module "fuse"
  }

  install_ssh() {
    package_install "openssh"
    system_ctl enable sshd
  }

  # Power management (tlp/powertop)
  install_tlp() {
    package_install "tlp"
    system_ctl enable tlp
    system_ctl enable tlp-sleep
  }

  install_xorg() {
    package_install "
    xorg-server xorg-server-utils
    xf86-input-synaptics xf86-input-mouse xf86-input-keyboard
    mesa
    "
    KEYMAP=$(localectl status | grep Keymap | awk '{print $3}')
    localectl set-keymap ${KEYMAP}
  }

  install_video_cards() {
    # Intel
    if [[ ${VIDEO_DRIVER} == intel ]]; then
      package_install "xf86-video-intel intel-dri libva-intel-driver"
      package_install "mesa-libgl"
      [[ ${ARCHI} == x86_64 ]] && package_install "lib32-mesa-libgl"
    # AMD/ATI
    elif [[ ${VIDEO_DRIVER} == ati ]]; then
      package_install "mesa-libgl"
      package_install "xf86-video-${VIDEO_DRIVER} ${VIDEO_DRIVER}-dri"
      [[ ${ARCHI} == x86_64 ]] && package_install "lib32-${VIDEO_DRIVER}-dri"
      add_module "radeon" "ati"
    # Vesa
    else
      package_install "xf86-video-${VIDEO_DRIVER}"
      package_install "mesa-libgl"
      [[ ${ARCHI} == x86_64 ]] && package_install "lib32-mesa-libgl"
    fi
  }

  # Installing Infinality font rendering
  font_config() {
    add_key "962DDE58"
    add_repository "infinality-bundle" "http://bohoomil.com/repo/\$arch" "Never"
    [[ $ARCHI == x86_64 ]] && add_repository "infinality-bundle-multilib" "http://bohoomil.com/repo/multilib/\$arch" "Never"
    is_package_installed "freetype2" && pacman -Rdds --noconfirm freetype2 fontconfig cairo
    package_install "infinality-bundle"
    [[ $ARCHI == x86_64 ]] && package_install "infinality-bundle-multilib"
    package_install "ttf-bitstream-vera ttf-dejavu"
  }

  install_cups() {
    package_install "cups cups-filters ghostscript gsfonts"
    package_install "gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters hplip splix cups-pdf"
    package_install "system-config-printer"
    system_ctl enable cups
  }

  install_additional_firmwares() {
    # MTP [Android Devices]
    package_install "libmtp kio-mtp android-udev"
  }

  install_desktop_environment() {
    # Setup KDE
    package_install "kf5 kf5-aids plasma sddm kde-gtk-config oxygen-gtk2 oxygen-gtk3 libappindicator-gtk2 libappindicator-gtk3 sni-qt lib32-sni-qt k3b kdesu"
    is_package_installed "cups" && package_install "kdeutils-print-manager"
    aur_package_install "flattr-icons-kde"
    system_ctl enable sddm

    # Remove the Cashew
    rm /usr/share/kde4/services/plasma-toolbox-desktoptoolbox.desktop
    rm /usr/share/kde4/services/plasma-toolbox-nettoolbox.desktop
    rm /usr/share/kde4/services/plasma-toolbox-paneltoolbox.desktop

    # Homerun launcher
    aur_package_install "kdeplasma-applets-homerun"
  }

  # Wireless internet front-end
  install_nm_wicd() {
    package_install "networkmanager kdeplasma-applets-plasma-nm"
    system_ctl enable NetworkManager
  }

  # Install extra applications used in a normal desktop environment
  install_x_extras() {
    package_install "steam mpv livestreamer youtube-dl thunderbird qtcreator cmake flashplugin gparted screenfetch scrot"
    aur_package_install "qbittorrent firefox-kde-opensuse"

    # Remove Steam outdated default shipped OpenGL libraries
    rm /home/${username}/.local/share/Steam/ubuntu12_32/steam-runtime/i386/usr/lib/i386-linux-gnu/libstdc++.so.6
    rm /home/${username}/.local/share/Steam/ubuntu12_32/steam-runtime/i386/lib/i386-linux-gnu/libgcc_s.so.1
    rm /home/${username}/.local/share/Steam/ubuntu12_32/steam-runtime/amd64/usr/lib/x86_64-linux-gnu/libstdc++.so.6
    rm /home/${username}/.local/share/Steam/ubuntu12_32/steam-runtime/amd64/lib/x86_64-linux-gnu/libgcc_s.so.1

    # Install GRUB theme
    package_install "grub2-theme-archxion-widescreen"
    sed -i '/GRUB_THEME=/s/^#//' /etc/default/grub
    sed -i '/"\/path\/to\/gfxtheme"/s/\/path\/to\/gfxtheme/\/boot\/grub\/themes\/Archxion-widescreen\/theme.txt' /etc/default/grub
    sed -i '/GRUB_GFXMODE=/s/auto/1920x1080/' /etc/default/grub
    grub-mkconfig -o /boot/grub/grub.cfg
  }

#  install_desktop_extras() {}
#  install_laptop_extras() {}
#  install_nuc_extras() {}

  clean_orphan_packages() {
    echo -ne "${BLUE}Deleting unneeded packages${RESET}"
    pacman -Rsc --noconfirm $(pacman -Qqdt) >>"$LOG" 2>&1 &
    PID=$!;progress $PID
    pacman-optimize
  }

# BEFOREHAND CHECKS
  check_root
  check_archlinux
  check_hostname
  check_connection# $CONNECTION
  check_pacman_blocked
  check_multilib
  pacman_key
  system_update
  configure_sudo
  create_new_user
  install_aurhelper

# CONFIGURATION
  if [[ $DEVICETYPE == "desktop" ]] || [[ $DEVICETYPE == "laptop" ]]; then
    # Basic Setup
    install_basic_setup
    install_ssh
    install_tlp
    install_xorg
    install_video_cards
    font_config
    install_cups
    install_additional_firmwares

    # Desktop Environment
    install_desktop_environment
    install_nm_wicd

    install_x_extras
    [[ $DEVICETYPE == "desktop" ]] && install_desktop_extras
    [[ $DEVICETYPE == "laptop" ]] && install_laptop_extras

  elif [[ $DEVICETYPE == "nuc" ]]; then
    # Basic Setup
    install_ssh
    install_tlp
    install_nuc_extras
  fi

clean_orphan_packages

read -p "${BLUE}Reboot system? [y/N]${RESET} " x
[[ $x == "y" ]] || [[ $x == "Y" ]] || [[ -z $x ]] && reboot
exit 0